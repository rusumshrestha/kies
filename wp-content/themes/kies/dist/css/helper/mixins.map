{
	"version": 3,
	"file": "../../../src/scss/helper/mixins.css",
	"sources": [
		"../../../src/scss/helper/mixins.scss"
	],
	"sourcesContent": [
		"/// Adds a browser prefix to the property\n/// @param {*} $property Property\n/// @param {*} $value Value\n\n@mixin css3-prefix($property, $value) {\n  -webkit-#{$property}: #{$value};\n  -khtml-#{$property}: #{$value};\n  -moz-#{$property}: #{$value};\n  -ms-#{$property}: #{$value};\n  -o-#{$property}: #{$value};\n  #{$property}: #{$value};\n}\n\n/// Border Radius\n/// @param {Size} $radius [5px] - Radius\n/// @require {mixin} css3-prefix\n@mixin border-radius($radius: 4px) {\n @include css3-prefix('border-radius', $radius);\n}\n\n\n//transitions\n\n@mixin transition($type: all, $transition: 0.2s, $effect: ease-in-out) {\n  @include css3-prefix('transition', $type $transition $effect);\n}\n\n\n/// Box Shadow\n/// @param {Size} $x [2px] - X\n/// @param {Size} $y [2px] - Y\n/// @param {Size} $blur [5px] - Blur\n/// @param {Color} $color [rgba(0,0,0,.4)] - Color\n/// @param {Boolean} $inset - Inset\n\n@mixin box-shadow($top: 2px, $left: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: \"\") {\n  @if ($inset != \"\") {\n    @include css3-prefix('box-shadow', $inset $top $left $blur $color);\n  } @else {\n    @include css3-prefix('box-shadow', $top $left $blur $color);\n  }\n}\n\n@mixin text-shadow($top, $left, $blur, $color, $inset:\"\") {\n      -webkit-text-shadow:$top $left $blur $color #{$inset};\n      -moz-text-shadow:$top $left $blur $color #{$inset};\n      text-shadow:$top $left $blur $color #{$inset};\n    }\t\t\n\t\n@mixin backface-visibility($hidden){\t\n\t-webkit-backface-visibility:$hidden;\n    -moz-backface-visibility:$hidden;\n    -ms-backface-visibility:$hidden;\n    -o-backface-visibility:$hidden;\n    backface-visibility:$hidden;\n} \n\n\t\n@mixin border-right-radius($radius){\n\t-webkit-border-top-right-radius: $radius;\n\t-webkit-border-bottom-right-radius: $radius;\n\t-moz-border-radius-topright: $radius;\n\t-moz-border-radius-bottomright: $radius;\n\tborder-top-right-radius: $radius;\n\tborder-bottom-right-radius: $radius;\n\t-webkit-border-top-left-radius: 0;\n\t-webkit-border-bottom-left-radius: 0;\n\t-moz-border-radius-topleft: 0;\n\t-moz-border-radius-bottomleft: 0;\n\tborder-top-left-radius: 0;\n\tborder-bottom-left-radius: 0;\n\t}\n\t\t\n@mixin border-left-radius($radius){\n\t-webkit-border-top-right-radius: 0;\n\t-webkit-border-bottom-right-radius: 0;\n\t-moz-border-radius-topright: 0;\n\t-moz-border-radius-bottomright: 0;\n\tborder-top-right-radius: 0;\n\tborder-bottom-right-radius: 0;\n\t-webkit-border-top-left-radius: $radius;\n\t-webkit-border-bottom-left-radius: $radius;\n\t-moz-border-radius-topleft: $radius;\n\t-moz-border-radius-bottomleft: $radius;\n\tborder-top-left-radius: $radius;\n\tborder-bottom-left-radius: $radius;\n\t}\t\t\n\t\n@mixin transition-timing($ease){\n  @include css3-prefix('transition-timing-function',$ease);\n}\t\n\t\n@mixin rotate($degree) {\n  @include css3-prefix('transform',rotate($degree));\n}\n\n@mixin transition_delay($start, $end) {\n  @include css3-prefix('transition-delay', $start,$end);\n}\n\n@mixin transition_duration($start, $end) {\n  @include css3-prefix(' transition-duration', $start,$end);\n}\n\n@mixin transition_property($value) {\n    transition-property: $value, transform;\n    -webkit-transition-property: $value, -webkit-transform;\n    -moz-transition-property: $value, -moz-transform;\n    -ms-transition-property: $value, -ms-transform;\n    -o-transition-property: $value, -o-transform;\n}\n@mixin transition_hover($property:all, $time:.3s, $function:linear){\n  -webkit-transition: $property $time $function;\n  -moz-transition: $property $time $function;\n  -ms-transition: $property $time $function;\n  -o-transition: $property $time $function;\n  transition: $property $time $function;\n}\n\n\n/// Responsive\n@mixin breakpoint($point) {\n  @if $point == xx-large {\n    @media (min-width: 1920px) { @content; }\n  }\n  @else if $point == x-large {\n    @media (min-width: 1300px) { @content; }\n  }\n  @else if $point == large {\n    @media (min-width: 1240px) { @content; }\n  }\n  @else if $point == medium {\n    @media (min-width: 992px) { @content; }\n  }\n  @else if $point == small {\n    @media (min-width: 768px)  { @content; }\n  }\n  @else if $point == x-small {\n    @media (min-width: 640px)  { @content; }\n  }\n   @else if $point == xx-small {\n    @media (min-width: 480px)  { @content; }\n  }\n}\n@mixin breakpointMax($point) {\n  @if $point == x-large {\n    @media (max-width: 1300px) { @content; }\n  }\n  @if $point == large {\n    @media (max-width: 1200px) { @content; }\n  }\n  @else if $point == medium {\n    @media (max-width: 991px) { @content; }\n  }\n  @else if $point == small {\n    @media (max-width: 767px)  { @content; }\n  }\n  @else if $point == x-small {\n    @media (max-width: 639px)  { @content; }\n  }\n   @else if $point == xx-small {\n    @media (max-width: 480px)  { @content; }\n  }\n}\n\n@mixin border($side, $width, $style, $color) {\n  @if $side == all {\n    border: $width $style $color;\n  } @else {\n    border-#{$side}: $width $style $color;\n  }\n}\n"
	],
	"mappings": "",
	"names": []
}